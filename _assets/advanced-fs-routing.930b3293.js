var e=Object.defineProperty,a=Object.prototype.hasOwnProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.propertyIsEnumerable,i=(a,t,n)=>t in a?e(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n,l=(e,l)=>{for(var r in l||(l={}))a.call(l,r)&&i(e,r,l[r]);if(t)for(var r of t(l))n.call(l,r)&&i(e,r,l[r]);return e};import{c as r,L as s}from"./clientRender.4d8779ba.js";const o={};function p(e){var{components:i}=e,p=((e,i)=>{var l={};for(var r in e)a.call(e,r)&&i.indexOf(r)<0&&(l[r]=e[r]);if(null!=e&&t)for(var r of t(e))i.indexOf(r)<0&&n.call(e,r)&&(l[r]=e[r]);return l})(e,["components"]);return r("wrapper",l(l(l({},o),p),{components:i,mdxType:"MDXLayout"}),r("h2",null,"Advanced Filesystem Routing: pageStrategy API"),r("blockquote",null,r("p",{parentName:"blockquote"},'The "Basic Filesystem Routing Convention" should satisfy most users\' needs. ',r("strong",{parentName:"p"},"You probably don't need to read this advanced guide"),".")),r("p",null,"For advanced users, vite-pages let you implement your own filesystem routing convention: you can ",r("strong",{parentName:"p"},"teach vite-pages how to collect page data from your project"),"."),r("p",null,"When ",r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/custom-find-pages/vite.config.ts"}),"configuring vite-plugin-react-pages"),", you can pass the ",r("inlineCode",{parentName:"p"},"pageStrategy")," option. It should be an instance of ",r("inlineCode",{parentName:"p"},"PageStrategy")," class. Here is an example of customizing pageStrategy:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"// vite.config.ts\nimport { defineConfig } from 'vite'\nimport * as path from 'path'\nimport reactRefresh from '@vitejs/plugin-react-refresh'\nimport mdx from 'vite-plugin-mdx'\nimport pages, {\n  PageStrategy,\n  FileHandler,\n  File,\n  extractStaticData,\n} from 'vite-plugin-react-pages'\n\nexport default defineConfig({\n  plugins: [\n    reactRefresh(),\n    mdx(),\n    pages({\n      pagesDir: path.join(__dirname, 'pages'),\n      // custom pageStrategy\n      pageStrategy: new PageStrategy(function findPages(pagesDir, helpers) {\n        helpers.watchFiles(\n          pagesDir,\n          '**/index.{md,mdx,js,jsx,ts,tsx}',\n          fileHandler\n        )\n      }),\n    }),\n  ],\n})\n\nconst fileHandler: FileHandler = async (file: File, fileHandlerAPI) => {\n  const pagePublicPath = getPagePublicPath(file.relative)\n  fileHandlerAPI.addPageData({\n    pageId: pagePublicPath,\n    dataPath: file.path,\n    staticData: await extractStaticData(file),\n  })\n}\n\n/**\n * turn `sub-path/page2/index.tsx` into `/sub-path/page2`\n */\nfunction getPagePublicPath(relativePageFilePath: string) {\n  console.log('getPagePublicPath', relativePageFilePath)\n  let pagePublicPath = relativePageFilePath.replace(\n    /index\\.(md|mdx|js|jsx|ts|tsx)$/,\n    ''\n  )\n  // remove ending slash\n  pagePublicPath = pagePublicPath.replace(/\\/$/, '')\n  // add starting slash\n  pagePublicPath = `/${pagePublicPath}`\n  return pagePublicPath\n}\n")),r("p",null,"With this custom pageStrategy, page files don't need to ends with ",r("inlineCode",{parentName:"p"},"$"),". Instead, they need to match the pattern ",r("inlineCode",{parentName:"p"},"**/index.{md,mdx,js,jsx,ts,tsx}"),"."),r("blockquote",null,r("p",{parentName:"blockquote"},"Checkout the complete example in ",r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/custom-find-pages2/vite.config.ts"}),"the custom-find-pages2 fixture"),".")),r("h3",null,"Steps of customizing pageStrategy"),r("p",null,"As shown by the above example, here is the usual steps to customize pageStrategy:"),r("ol",null,r("li",{parentName:"ol"},"Define a ",r("inlineCode",{parentName:"li"},"findPages")," function and pass it to ",r("inlineCode",{parentName:"li"},"PageStrategy")," constructor."),r("li",{parentName:"ol"},"Inside the ",r("inlineCode",{parentName:"li"},"findPages"),", use ",r("inlineCode",{parentName:"li"},"helpers.watchFiles(baseDir, glob, fileHandler)")," to find the files that you need.",r("ul",{parentName:"li"},r("li",{parentName:"ul"},"vite-pages will pass the glob(or glob array) to ",r("a",l({parentName:"li"},{href:"https://github.com/paulmillr/chokidar"}),"chokidar"),". vite-pages use chokidar to scan the fileSystem and watch for files."),r("li",{parentName:"ul"},"Whenever a file is scaned, added or updated, vite-pages will call the fileHandler with that file. When the file is unlinked, vite-pages will automatically delete the related page data."))),r("li",{parentName:"ol"},"Inside the ",r("inlineCode",{parentName:"li"},"fileHandler"),", read the infomation from ",r("inlineCode",{parentName:"li"},"file")," and register page data by calling ",r("inlineCode",{parentName:"li"},"fileHandlerAPI.addPageData"),".",r("ul",{parentName:"li"},r("li",{parentName:"ul"},"There are two more helpers inside ",r("inlineCode",{parentName:"li"},"fileHandlerAPI")," that help you to update page data. We will introduce them in the following section.")))),r("h3",null,"Handle file change and update page data"),r("p",null,"The ",r("inlineCode",{parentName:"p"},"fileHandler")," should conform to this interface:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"type FileHandler = (\n  file: File,\n  api: HandlerAPI\n) => void | Promise<void> | PageData | Promise<PageData>\n")),r("p",null,"The ",r("inlineCode",{parentName:"p"},"HandlerAPI")," contains a set of helpers that help you to update page data."),r("h4",null,"fileHandlerAPI.addPageData(pageData)"),r("p",null,"The pageData should conform to this interface:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"interface PageData {\n  /**\n   * The page route path.\n   * User can register multiple page data with same pageId,\n   * as long as they have different keys.\n   * Page data with same pageId will be merged.\n   *\n   * @example '/posts/hello-world'\n   */\n  readonly pageId: string\n  /**\n   * The data key.\n   * For a same page, users can register multiple data pieces,\n   * each with its own key. (Composed Page Data)\n   *\n   * @default 'main'\n   */\n  readonly key?: string\n  /**\n   * The path to the runtime data module.\n   * It will be registered with the `key`.\n   */\n  readonly dataPath?: string\n  /**\n   * The value of static data.\n   * It will be registered with the `key`.\n   */\n  readonly staticData?: any\n}\n")),r("p",null,"In most cases, ",r("inlineCode",{parentName:"p"},"dataPath")," is the path of the currently handled file. And ",r("inlineCode",{parentName:"p"},"staticData")," is statically extracted from the file content (js docblock or markdown frontmatter). Vite-pages has exported a helper ",r("inlineCode",{parentName:"p"},"extractStaticData")," to do that."),r("p",null,"Checkout ",r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/custom-find-pages2/vite.config.ts"}),"the custom-find-pages2 fixture")," for an example."),r("blockquote",null,r("p",{parentName:"blockquote"},"Checkout ",r(s,{to:"/page-data",mdxType:"Link"},"the page data doc")," for more explanation of ",r("inlineCode",{parentName:"p"},"key"),".")),r("h4",null,"fileHandlerAPI.getRuntimeData(pageId)"),r("p",null,"Inside the fileHandler, you can use it to get the runtimeData of a certain page. You can read or mutate the properties of it:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"const runtimeDataPaths = fileHandlerAPI.getRuntimeData(pageId)\nif (!runtimeDataPaths[key]) runtimeDataPaths[key] = pathToRuntimeModule\n")),r("p",null,"Checkout ",r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/custom-find-pages/vite.config.ts"}),"the custom-find-pages fixture")," for an example."),r("h4",null,"fileHandlerAPI.getStaticData(pageId)"),r("p",null,"Similar to the ",r("inlineCode",{parentName:"p"},"fileHandlerAPI.getRuntimeData")," API, you can use ",r("inlineCode",{parentName:"p"},"fileHandlerAPI.getStaticData")," to get the staticData of a certain page. And tou can read or mutate the properties of it:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"const staticData = fileHandlerAPI.getStaticData(pageId)\nif (!staticData[key]) staticData[key] = await extractStaticData(file)\n")),r("p",null,"Checkout ",r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/playground/custom-find-pages/vite.config.ts"}),"the custom-find-pages fixture")," for an example."),r("h3",null,"Sharable pageStrategy"),r("p",null,"You can also define your strategy as a subclass of ",r("inlineCode",{parentName:"p"},"PageStrategy"),". It is more sharable than the previous way."),r("p",null,"For example, this is how vite-pages defines the default page strategy:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"export class DefaultPageStrategy extends PageStrategy {\n  constructor(\n    opts: { extraFindPages?: FindPages; fileHandler?: FileHandler } = {}\n  ) {\n    const { extraFindPages, fileHandler = defaultFileHandler } = opts\n    // pass a wrapped findPages function to super class\n    super((pagesDir, helpersFromParent) => {\n      // we can create our own helpers, providing a default fileHandler\n      // and not using helpersFromParent\n      const helpers = this.createHelpers(fileHandler)\n      helpers.watchFiles(pagesDir, '**/*$.{md,mdx,js,jsx,ts,tsx}')\n      if (typeof extraFindPages === 'function') {\n        extraFindPages(pagesDir, helpers)\n      }\n    })\n  }\n}\n")),r("p",null,r("a",l({parentName:"p"},{href:"https://github.com/vitejs/vite-plugin-react-pages/blob/master/packages/react-pages/src/node/dynamic-modules/DefaultPageStrategy/index.ts"}),"Here is the complete definition of DefaultPageStrategy"),". And ",r(s,{to:"/examples/component-library",mdxType:"Link"},"here is an example of using it"),"."),r("h4",null,"Examples"),r("p",null,"For real-life examples of customizing pageStrategy, checkout ",r(s,{to:"/examples/component-library",mdxType:"Link"},'"Example: develop a component library"'),"."),r("h4",null,"Types"),r("p",null,"Here is the relavent types:"),r("pre",null,r("code",l({parentName:"pre"},{className:"language-ts"}),"type FindPages = (\n  pagesDir: string,\n  helpers: PageHelpers\n) => void | Promise<void>\n\ninterface PageHelpers extends HandlerAPI {\n  /**\n   * Read the static data from a file.\n   */\n  readonly extractStaticData: (\n    file: File\n  ) => Promise<{\n    readonly [key: string]: any\n    readonly sourceType: string\n  }>\n  /**\n   * Scan the fileSystem and\n   * set page data in the file handler.\n   * File deletion will be handled automatically\n   */\n  readonly watchFiles: WatchFilesHelper\n}\n\ninterface WatchFilesHelper {\n  /** Watch all files within a directory (except node_modules and .git) */\n  (baseDir: string, fileHandler?: FileHandler): void\n  /** Watch files matching the given glob */\n  (baseDir: string, glob: string, fileHandler?: FileHandler): void\n  /** Watch files matching one of the given globs */\n  (baseDir: string, globs: string[], fileHandler?: FileHandler): void\n}\n\ntype FileHandler = (\n  file: File,\n  api: HandlerAPI\n) => void | Promise<void> | PageData | Promise<PageData>\n\ninterface HandlerAPI {\n  /**\n   * Get a mutable data object of runtimeData\n   */\n  getRuntimeData: (\n    pageId: string\n  ) => {\n    [key: string]: string\n  }\n  /**\n   * Get a mutable data object of staticData\n   */\n  getStaticData: (\n    pageId: string\n  ) => {\n    [key: string]: any\n  }\n  /**\n   * Add page data.\n   * If the data already exists, overwrite it.\n   */\n  addPageData: (pageData: PageData) => void\n}\n\ninterface PageData {\n  /**\n   * The page route path.\n   * User can register multiple page data with same pageId,\n   * as long as they have different keys.\n   * Page data with same pageId will be merged.\n   *\n   * @example '/posts/hello-world'\n   */\n  readonly pageId: string\n  /**\n   * The data key.\n   * For a same page, users can register multiple data pieces,\n   * each with its own key. (Composed Page Data)\n   *\n   * @default 'main'\n   */\n  readonly key?: string\n  /**\n   * The path to the runtime data module.\n   * It will be registered with the `key`.\n   */\n  readonly dataPath?: string\n  /**\n   * The value of static data.\n   * It will be registered with the `key`.\n   */\n  readonly staticData?: any\n}\n")))}p.isMDXComponent=!0;var d=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:p});const g={};g.main=d;export default g;
