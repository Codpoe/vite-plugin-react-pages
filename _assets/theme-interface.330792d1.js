var e=Object.defineProperty,n=Object.prototype.hasOwnProperty,a=Object.getOwnPropertySymbols,t=Object.prototype.propertyIsEnumerable,o=(n,a,t)=>a in n?e(n,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[a]=t,r=(e,r)=>{for(var d in r||(r={}))n.call(r,d)&&o(e,d,r[d]);if(a)for(var d of a(r))t.call(r,d)&&o(e,d,r[d]);return e};import{c as d}from"./clientRender.4d8779ba.js";const i={};function l(e){var{components:o}=e,l=((e,o)=>{var r={};for(var d in e)n.call(e,d)&&o.indexOf(d)<0&&(r[d]=e[d]);if(null!=e&&a)for(var d of a(e))o.indexOf(d)<0&&t.call(e,d)&&(r[d]=e[d]);return r})(e,["components"]);return d("wrapper",r(r(r({},i),l),{components:o,mdxType:"MDXLayout"}),d("pre",null,d("code",r({parentName:"pre"},{className:"language-ts"}),"/** The type of a theme. */\nexport type Theme = React.ComponentType<ThemeProps>\n\nexport interface ThemeProps {\n  readonly loadedData: PagesLoaded\n  readonly loadState: LoadState\n}\n\n/**\n * A react hook to get static data.\n * import { useStaticData } from 'vite-plugin-react-pages/client'\n */\nexport interface UseStaticData {\n  (): PagesStaticData\n  (path: string): Record<string, any>\n}\n\n/**\n * All pages' static data.\n */\nexport interface PagesStaticData {\n  /**\n   * For each page, its static data is indexed by keys.\n   */\n  readonly [routePath: string]: Record<string, any>\n}\n\n/**\n * All runtime data that is already loaded.\n */\nexport interface PagesLoaded {\n  readonly [routePath: string]: PageLoaded\n}\n\n/**\n * For each page, its runtime data can be composed of multile modules.\n * These modules are indexed by keys.\n *\n * Normally, a page only contains one module, with the key being `main`.\n * And the default export of the main module is a React component,\n * which will render the page. In that case, `pageLoaded.main.default` is the component.\n */\nexport type PageLoaded = Record<string, any>\n\n/**\n * The current loading state of the app.\n */\nexport type LoadState =\n  | {\n      readonly type: 'loading' | 'loaded' | '404'\n      readonly routePath: string\n    }\n  | {\n      readonly type: 'load-error'\n      readonly routePath: string\n      readonly error?: any\n    }\n")))}l.isMDXComponent=!0;export{l as M};
